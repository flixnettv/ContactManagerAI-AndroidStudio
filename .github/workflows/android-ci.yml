name: 🤖 FlixFlash Contact Manager AI - Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🧪 Run Unit Tests
      run: ./gradlew testDebugUnitTest
      
    - name: 📊 Generate Test Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/tests/
          */build/reports/tests/

  build:
    name: 🔨 Build APK
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔨 Build Debug APK
      run: ./gradlew assembleDebug
      
    - name: 📱 Upload Debug APK
      uses: actions/upload-artifact@v3
      with:
        name: debug-apk
        path: |
          app/build/outputs/apk/debug/*.apk
          app/build/outputs/apk/arm64-v8a/debug/*.apk
          app/build/outputs/apk/armeabi-v7a/debug/*.apk
          app/build/outputs/apk/x86_64/debug/*.apk
          app/build/outputs/apk/*.apk

  build-release:
    name: 🚀 Build Release APK
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔐 Create keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks
      if: ${{ secrets.KEYSTORE_BASE64 }}
      
    - name: 🚀 Build Release APK
      run: ./gradlew assembleRelease
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      
    - name: 📱 Upload Release APK
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: app/build/outputs/apk/release/*.apk
        
    - name: 🚀 Upload to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: app/build/outputs/apk/release/app-release.apk
        asset_name: FlixFlash-ContactManager-AI-${{ github.event.release.tag_name }}.apk
        asset_content_type: application/vnd.android.package-archive

  lint:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔍 Run Lint
      run: ./gradlew lintDebug
      
    - name: 📊 Upload Lint Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: |
          app/build/reports/lint-results-debug.html
          */build/reports/lint-results-debug.html

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🛡️ Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: java
        
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔨 Build for Analysis
      run: ./gradlew assembleDebug
      
    - name: 🛡️ Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 📦 Check Dependencies
      run: ./gradlew dependencyUpdates
      
    - name: 🛡️ Vulnerability Scan
      run: ./gradlew dependencyCheckAnalyze
      continue-on-error: true
      
    - name: 📊 Upload Dependency Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-report
        path: build/reports/

  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, lint, security-scan, dependency-check]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ FlixFlash Contact Manager AI - Build Successful!"
        echo "🤖 All tests passed and APK built successfully"
        
    - name: 📢 Notify Failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ FlixFlash Contact Manager AI - Build Failed!"
        echo "🚨 Please check the logs for details"