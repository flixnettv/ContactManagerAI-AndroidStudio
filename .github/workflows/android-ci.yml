name: 🤖 FlixFlash Contact Manager AI - Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

permissions:
  contents: write

jobs:
  unit-tests:
    name: 🧪 Unit Tests (spamdetection)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 🐘 Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: 📋 Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: 🧪 Run spamdetection tests
        run: ./gradlew :spamdetection:testDebugUnitTest

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 🐘 Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: 📋 Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: 🧪 Run Unit Tests
        run: ./gradlew testDebugUnitTest
      - name: 📊 Generate Test Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            app/build/reports/tests/
            */build/reports/tests/

  build:
    name: 🔨 Build APK
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 🐘 Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: 📋 Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: 🔨 Build Debug APK
        run: ./gradlew assembleDebug
      - name: 📱 Upload Debug APK
        uses: actions/upload-artifact@v3
        with:
          name: debug-apk
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/apk/arm64-v8a/debug/*.apk
            app/build/outputs/apk/armeabi-v7a/debug/*.apk
            app/build/outputs/apk/x86_64/debug/*.apk
            app/build/outputs/apk/*.apk

  build-release:
    name: 🚀 Build Release APK
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 🐘 Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: 📋 Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: 🔐 Create keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks
        if: ${{ secrets.KEYSTORE_BASE64 }}
      - name: 🚀 Build Release APK
        run: ./gradlew assembleRelease
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      - name: 📱 Upload Release APK
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk
      - name: 🚀 Upload to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: FlixFlash-ContactManager-AI-${{ github.event.release.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive

  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, build-release]
    if: always()
    steps:
      - name: 📢 Notify Success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ FlixFlash Contact Manager AI - Build Successful!"
          echo "🤖 All tests passed and APK built successfully"
      - name: 📢 Notify Failure
        if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ FlixFlash Contact Manager AI - Build Failed!"
          echo "🚨 Please check the logs for details"

  commit-apk-to-repo:
    name: 📦 Commit APKs into final_apk_delivery
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download debug APK artifact
        uses: actions/download-artifact@v4
        with:
          name: debug-apk
          path: _apk_debug
      - name: Prepare delivery folder
        run: |
          mkdir -p final_apk_delivery
          cp -f _apk_debug/*.apk final_apk_delivery/ || true
      - name: Commit and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add final_apk_delivery/*.apk || true
          if git commit -m "chore: add latest debug APK(s) to final_apk_delivery"; then
            git push
          else
            echo "No changes to commit"
          fi

  lint:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔍 Run Lint
      run: ./gradlew lintDebug
      
    - name: 📊 Upload Lint Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: |
          app/build/reports/lint-results-debug.html
          */build/reports/lint-results-debug.html

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🛡️ Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: java
        
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔨 Build for Analysis
      run: ./gradlew assembleDebug
      
    - name: 🛡️ Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: 📋 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 📦 Check Dependencies
      run: ./gradlew dependencyUpdates
      
    - name: 🛡️ Vulnerability Scan
      run: ./gradlew dependencyCheckAnalyze
      continue-on-error: true
      
    - name: 📊 Upload Dependency Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-report
        path: build/reports/

  release-apk:
    name: 🔐 Build Signed Release APK
    runs-on: ubuntu-latest
    needs: build
    if: ${{ secrets.KEYSTORE_BASE64 && secrets.KEYSTORE_PASSWORD && secrets.KEY_ALIAS }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: gradle/gradle-build-action@v2
      - name: Decode keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks
      - name: Grant execute
        run: chmod +x gradlew
      - name: Build Release APK
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew assembleRelease
      - name: Upload Release APK
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk

  commit-release-apk-to-repo:
    name: 📦 Commit Release APK into final_apk_delivery
    runs-on: ubuntu-latest
    needs: release-apk
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download release APK artifact
        uses: actions/download-artifact@v4
        with:
          name: release-apk
          path: _apk_release
      - name: Prepare delivery folder
        run: |
          mkdir -p final_apk_delivery
          cp -f _apk_release/*.apk final_apk_delivery/ || true
      - name: Commit and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add final_apk_delivery/*.apk || true
          if git commit -m "chore: add latest release APK(s) to final_apk_delivery"; then
            git push
          else
            echo "No changes to commit"
          fi