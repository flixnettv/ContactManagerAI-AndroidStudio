name: manual-release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name (e.g., v1.0.0)'
        required: true
      release_name:
        description: 'Release title'
        required: false
        default: 'Manual Release'

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: gradle/gradle-build-action@v2

      - name: Grant execute
        run: chmod +x gradlew

      - name: Decode keystore (if provided)
        if: ${{ secrets.KEYSTORE_BASE64 }}
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks

      - name: Build Release APK (signed if secrets present)
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && [ -n "${{ secrets.KEY_ALIAS }}" ]; then
            ./gradlew assembleRelease
            echo "APK_PATH=app/build/outputs/apk/release/app-release.apk" >> $GITHUB_ENV
          else
            ./gradlew assembleDebug
            # Prefer universal if exists; else pick arm64
            APK=$(ls app/build/outputs/apk/debug/*.apk 2>/dev/null | head -n1)
            echo "APK_PATH=$APK" >> $GITHUB_ENV
          fi

      - name: Create Git tag
        run: |
          git tag ${{ inputs.tag_name }} || true
          git push origin ${{ inputs.tag_name }} || true

      - name: Create GitHub Release and upload APK
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          name: ${{ inputs.release_name }}
          files: ${{ env.APK_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare delivery folder
        run: |
          mkdir -p final_apk_delivery
          cp -f "$APK_PATH" final_apk_delivery/ || true

      - name: Commit changes
        id: commit
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add final_apk_delivery/*.apk || true
          if git commit -m "chore: add APK from release ${{ inputs.tag_name }} to final_apk_delivery"; then
            echo "committed=1" >> $GITHUB_OUTPUT
          else
            echo "committed=0" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        id: push
        run: |
          set -e
          if [ "${{ steps.commit.outputs.committed }}" = "1" ]; then
            git push || echo "push_failed=1" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit"; echo "push_failed=0" >> $GITHUB_OUTPUT
          fi

      - name: Create PR fallback
        if: ${{ steps.push.outputs.push_failed == '1' }}
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "chore: add APK from release ${{ inputs.tag_name }} to final_apk_delivery"
          branch: ci/manual-release-${{ inputs.tag_name }}
          title: "Add APK from release ${{ inputs.tag_name }}"
          body: "This PR adds the APK from release ${{ inputs.tag_name }} into final_apk_delivery."